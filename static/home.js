var default_latitude_offset = 0.000633;
var default_longitude_offset = 0.000755;
var herak_lat = 47.666859;
var herak_long = -117.401717;
var foley_lat = 47.666668;
var foley_long = -117.400645;
var hemm_lat = 47.667322;
var hemm_long = -117.399905;
var crosby_lat = 47.667456;
var crosby_long = -117.401291;
var default_layer = "mapnik";
var chosen_Location = "";
var chosen_items = [];
var user_lat = 0;
var user_long = 0;
var delivery_lat = foley_lat;
var delivery_long = foley_long;
var delivery_dictionary = {}
var ordered = false;


//define variables to see if the position of the bot has moved
var lastLat = 47.666867;
var lastLong = -117.4017010;
var lastPercLocation = 0.0;

var feature_end;
var feature_start;
var vectorLayer;




function buildOSM(lat_start, long_start, lat_end, long_end){
	// CODE FROM http://harrywood.co.uk/maps/examples/openlayers/marker-array.view.html
	map = new OpenLayers.Map("map-container");
	map.addLayer(new OpenLayers.Layer.OSM());
	
	epsg4326 =  new OpenLayers.Projection("EPSG:4326"); //WGS 1984 projection
	projectTo = map.getProjectionObject(); //The map projection (Spherical Mercator)

	var lonLat = new OpenLayers.LonLat( long_end , lat_end ).transform(epsg4326, projectTo);
		
	var zoom=17;
	map.setCenter (lonLat, zoom);

	vectorLayer = new OpenLayers.Layer.Vector("Overlay");
	
	// Define an array. This could be done in a seperate js file.
	// This tidy formatted section could even be generated by a server-side script (jsonp)
	var markers = [
	[long_start, lat_start],
	[long_end, lat_end]
	];
	
	var lon = markers[0][0];
	var lat = markers[0][1];

	feature_start = new OpenLayers.Feature.Vector(
				new OpenLayers.Geometry.Point( lon, lat ).transform(epsg4326, projectTo),
				{description: "marker for startpoint"},
				//{externalGraphic: 'marker.png', graphicHeight: 25, graphicWidth: 21, graphicXOffset:-12, graphicYOffset:-25  }
			);             
	vectorLayer.addFeatures(feature_start);

	var lon = markers[1][0];
	var lat = markers[1][1];

	feature_end = new OpenLayers.Feature.Vector(
				new OpenLayers.Geometry.Point( lon, lat ).transform(epsg4326, projectTo),
				{description: "marker for endpoint"},
				//{externalGraphic: 'marker.png', graphicHeight: 25, graphicWidth: 21, graphicXOffset:-12, graphicYOffset:-25  }
			);             
	vectorLayer.addFeatures(feature_end);

	//Loop through the markers array                    
	
	map.addLayer(vectorLayer);
	

	var controls = {
		selector: new OpenLayers.Control.SelectFeature(vectorLayer, { onSelect: createPopup, onUnselect: destroyPopup })
	};

	function createPopup(feature) {
		feature.popup = new OpenLayers.Popup.FramedCloud("pop",
			feature.geometry.getBounds().getCenterLonLat(),
			null,
			'<div class="markerContent">'+feature.attributes.description+'</div>',
			null,
			true,
			function() { controls['selector'].unselectAll(); }
		);
		//feature.popup.closeOnMove = true;
		map.addPopup(feature.popup);
	}

	function destroyPopup(feature) {
	feature.popup.destroy();
	feature.popup = null;
	}
	
	map.addControl(controls['selector']);
	controls['selector'].activate();

	

	// END CODE FROM harrywood.co.uk
}

function updateOSM(lat_start, long_start, lat_end, long_end){
	vectorLayer.removeFeatures( [feature_start] );
	vectorLayer.removeFeatures( [feature_end] );

	var markers = [
	[long_start, lat_start],
	[long_end, lat_end]
	];
	
	var lon = markers[0][0];
	var lat = markers[0][1];

	feature_start = new OpenLayers.Feature.Vector(
				new OpenLayers.Geometry.Point( lon, lat ).transform(epsg4326, projectTo),
				{description: "marker for startpoint"}
				//{externalGraphic: 'marker.png', graphicHeight: 25, graphicWidth: 21, graphicXOffset:-12, graphicYOffset:-25  }
			);             
	vectorLayer.addFeatures(feature_start);

	console.log(lat + " " + lon);

	var lon = markers[1][0];
	var lat = markers[1][1];

	feature_end = new OpenLayers.Feature.Vector(
				new OpenLayers.Geometry.Point( lon, lat ).transform(epsg4326, projectTo),
				{description: "marker for endpoint"}
				//{externalGraphic: 'marker.png', graphicHeight: 25, graphicWidth: 21, graphicXOffset:-12, graphicYOffset:-25  }
			);             
	vectorLayer.addFeatures(feature_end);

	console.log(lat + " " + lon);

}

function updateMapAndStatus(){
	//if the bot has moved, reload the page
	if( (this.response[0]["latitude"] !== lastLat) || (this.response[0]["longitude"]!== lastLong) ){
		//var url = generatePathUrl(this.response[0]["latitude"], this.response[0]["longitude"], delivery_dictionary.latitude, delivery_dictionary.longitude);
//        	document.getElementById("openstreetmap").src=url;
		updateOSM(this.response[0]["latitude"], this.response[0]["longitude"], delivery_lat, delivery_long);
		lastLat = this.response[0]["latitude"];
		lastLong = this.response[0]["longitude"];
	}
	if((this.response[0]["perc_complete"] !== lastPercLocation)){
		prog_bar = document.getElementsByClassName("progress-bar")[0];
		//prog_bar.aria-valuenow = this.response[0]["perc_complete"]; 
		prog_bar.style.width = this.response[0]["perc_complete"] + "%";
		prog_bar.innerHTML = this.response[0]["perc_complete"];
		
		status_update = document.getElementById("status");
		if (this.response[0]["perc_complete"] > 0 && this.response[0]["perc_complete"] < 100){
			status_update.innerHTML = "In Transit";
		}
		else if (this.response[0]["perc_complete"] == 100){
			status_update.innerHTML = "Ready For Pickup";
		}	
	}
}

function updateBotLocation(){
	var xhr = new XMLHttpRequest(); //create xml request
	xhr.addEventListener("load", updateMapAndStatus); //call function on load
	xhr.responseType = "json";
	xhr.open("GET", "/location/api/delivery/robot_location", true);
	xhr.send();
}


window.addEventListener("load", function() {
	buildOSM(lastLat, lastLong, hemm_lat, hemm_long);
	document.getElementById("order-button").addEventListener("click", function(){
		//check if the order has been placed
		//since we are only doing one
		

		if (!ordered){
			//check for chosen items
			items = document.getElementsByClassName("food-items");
			for(var i = 0; i< items.length; i++){
				if(items[i].checked == true){
					chosen_items.push(items[0]);
				}
			}

			
			if(chosen_Location === ""){
				alert("You have not chosen a delivery location. If you have chosen a user specified location, please press 'load specified location'")	
			}else if (chosen_items.length == 0){
				alert("You have not chosen a food item(s)'")	
			}else{
				delivery_dictionary.latitude = delivery_lat;
				delivery_dictionary.longitude = delivery_long;
				document.getElementById("delivery-status-container").style.display = "block";

				document.getElementById("herak-go-button").disabled = true;
				document.getElementById("foley-go-button").disabled = true;
				document.getElementById("crosby-go-button").disabled = true;
				document.getElementById("hemm-go-button").disabled = true;
				document.getElementById("food-checkboxes").disabled = true;
				
				var xhr = new XMLHttpRequest();
				var data = new FormData();
				data.append("latitude",delivery_lat);
				data.append("longitude",delivery_long);
				xhr.open('POST', '/location/api/delivery/delivery_location');
				xhr.send(data);
				ordered = true;

				//update every 5 seconds once an order has been placed
				var mapLoadInterval = setInterval(updateBotLocation, 5000); //5 seconds
				updateOSM(lastLat, lastLong, delivery_lat, delivery_long);
			}
		}
		else
		{
			alert("Order has already been placed")	

		}
	});
	

	// event listener for "Herak" button
	document.getElementById("herak-go-button").addEventListener("click", function(){
		chosen_Location = "herak";
		delivery_lat = herak_lat;
		delivery_long = herak_long;
		updateOSM(lastLat, lastLong, delivery_lat, delivery_long);
	});

	// event listener for "Foley" button
	document.getElementById("foley-go-button").addEventListener("click", function(){
		
		chosen_Location = "foley";
		delivery_lat = foley_lat;
		delivery_long = foley_long;
		updateOSM(lastLat, lastLong, delivery_lat, delivery_long);

	});
	// event listener for "Hemmingson" button
	document.getElementById("hemm-go-button").addEventListener("click", function(){
		
		chosen_Location = "hemmingson";
		delivery_lat = hemm_lat;
		delivery_long = hemm_long;
		updateOSM(lastLat, lastLong, delivery_lat, delivery_long);
	});
	// event listener for "Crosby" button
	document.getElementById("crosby-go-button").addEventListener("click", function(){
		
		chosen_Location = "crosby";
		delivery_lat = crosby_lat;
		delivery_long = crosby_long;
		updateOSM(lastLat, lastLong, delivery_lat, delivery_long);
	});
});


